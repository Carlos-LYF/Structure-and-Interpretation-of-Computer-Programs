#lang racket
;(require scheme/mpair)

;(define (db . x) (apply printf x))

(define vs (read))
(define vt (read))
(define dis (make-vector 200010 +inf.0))
(vector-set! dis vs -1)

(define tail (mcons vs '()))
(define (go x d)
	(when (and (<= 0 x 200000) (< d (vector-ref dis x)))
		(vector-set! dis x d)
		(set-mcdr! tail (mcons x '()))
		(set! tail (mcdr tail))
	)
)
(let loop ((head tail))
	(define u (mcar head))
	(define d (+ 1 (vector-ref dis u)))
	;(db "u = ~a  d = ~a\n" u d)
	(when (= u vt) (printf "~a\n" d))
	(unless (= u vt)
		(go (+ u 1) d)
		(go (- u 1) d)
		(go (* u 2) d)
		(unless (null? (mcdr head)) (loop (mcdr head)))
	)
)
